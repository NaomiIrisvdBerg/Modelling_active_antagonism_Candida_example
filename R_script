#MODELLING SUBSTRATE-DEPENDENT ANTAGONISM IN MICROBIAL CO-CULTURES USING A MASS-BALANCED FRAMEWORK by Naomi van den Berg
#Capturing dynamics of Candida albicans * Lactobacillus johnsonii MT4 co-culture
#Grown planktonically in BHI medium batch culture, as reported by Vazquez-Munoz et al., 2022, entitled: 
#"Insights From the Lactobacillus johnsonii Genome Suggest the Production of Metabolites With Antibiofilm Activity Against the Pathobiont Candida albicans"
# https://doi.org/10.3389/fmicb.2022.853762

#In this work, we aim to account for co-culture dynamics mediated by active antagonism as well as competition and cross-feeding

#Run the following code chronologically in order to compare different modes of secretion and sensitivity to the anticandidal compound
#in recreating the observed inhibition along an inoculation load gradient of the secretor species, as reported by Vazquez-Munoz et al., in Fig. 4B.
  #Object names are re-used hence the requirement of running the code chronologically, or per block (i.e., mode/scenario) 

#for further questions re. model parameterisation / parameter inference, please approach Naomi van den Berg
#Version of script: November, 2024


#Load required packages:
library(deSolve)   #we used v 1.40
library(tidyverse) #we used v 2.0.0
library(ggplot2) #we used v 3.5.1
library(reshape2) #we used v 1.4.4


############################################BHI############################
#FIRST scenario modelled:
#No sensitivity, conditionally proportional secretion

##First; no sensitvity control
#Since the density of Lj MT4 is tied to how much antimicrobial it secretes, and thus may impact competition with Candida for the sugars, 
#we need a no-sensitivity control for conditional and non-conditional R1-dependent secretion of anticandidal metabolite M2

#Looped:
n_simulations <- 10000

#Candida control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, # runif(1, 0.05, 0.1), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control 

", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(NA, 7)

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control

", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  scale_y_log10()


Candida_control_data <- subset(plot_data, variable == "B2" & Time == 24)








#MT4 control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, # runif(1, 0.05, 0.1), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Conditional & R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(-0.25, 3) 

ggplot(plot_data, aes(x = Time, y = mean +0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Conditional & R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  #ylim(-0.25, 2) +
  scale_y_log10() 





MT4_control_data <- subset(plot_data, variable == "B1" & Time == 24)







#1:1 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, # runif(1, 0.05, 0.1), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()

Candida_1_1_data <- subset(plot_data, variable == "B2" & Time == 24)







#1:10 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, # runif(1, 0.05, 0.1), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
No sensitivity, 
conditional& R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 

Candida_1_10_data <- subset(plot_data, variable == "B2" & Time == 24)






#1:100 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, # runif(1, 0.05, 0.1), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:100 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:100 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 


Candida_1_100_data <- subset(plot_data, variable == "B2" & Time == 24)










#1:1000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, # runif(1, 0.05, 0.1), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1000 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1000 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 


Candida_1_1000_data <- subset(plot_data, variable == "B2" & Time == 24)








#1:10000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, # runif(1, 0.05, 0.1), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10000 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() 

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10000 Inoculation, 
No sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 


Candida_1_10000_data <- subset(plot_data, variable == "B2" & Time == 24)








##Output 
Candida_control_data$Ratio <- "Ctrl"
Candida_1_1_data$Ratio <- "1:1"
Candida_1_10_data$Ratio <- "1:10"
Candida_1_100_data$Ratio <- "1:100"
Candida_1_1000_data$Ratio <- "1:1000"
Candida_1_10000_data$Ratio <- "1:10000"

no_sensitivity_conditionally_proportional_secretion <- rbind(Candida_control_data, Candida_1_1_data,
                                                                        Candida_1_10_data, Candida_1_100_data,
                                                                        Candida_1_1000_data, Candida_1_10000_data)

Candida_control_mean <- Candida_control_data[1,3]

no_sensitivity_conditionally_proportional_secretion$Candida_control_mean <- Candida_control_mean$mean

no_sensitivity_conditionally_proportional_secretion$Proportional_loss_Candida <- no_sensitivity_conditionally_proportional_secretion$mean / no_sensitivity_conditionally_proportional_secretion$Candida_control_mean




##Attach real/observed data for Proportional_loss_Candida
no_sensitivity_conditionally_proportional_secretion <- no_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 1,
    Ratio == "1:1" ~ 0.978,
    Ratio == "1:10" ~ 0.897,
    Ratio == "1:100" ~ 0.852,
    Ratio == "1:1000" ~ 0.822,
    Ratio == "1:10000" ~ 0.763
  ))


no_sensitivity_conditionally_proportional_secretion <- no_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(sd_Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 0.011,
    Ratio == "1:1" ~ 0.003,
    Ratio == "1:10" ~ 0.035,
    Ratio == "1:100" ~ 0.011,
    Ratio == "1:1000" ~ 0.026,
    Ratio == "1:10000" ~ 0.018
  ))


no_sensitivity_conditionally_proportional_secretion$difference_measured_vs_modelled <- no_sensitivity_conditionally_proportional_secretion$Proportional_loss_Candida - no_sensitivity_conditionally_proportional_secretion$Proportional_loss_Candida_measured


no_sensitivity_conditionally_proportional_secretion <- no_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(Lj_MT4_relative_load = case_when(
    Ratio == "Ctrl" ~ 0,
    Ratio == "1:1" ~ 1,
    Ratio == "1:10" ~ 10,
    Ratio == "1:100" ~ 100,
    Ratio == "1:1000" ~ 1000,
    Ratio == "1:10000" ~ 10000
  ))




ggplot(subset(no_sensitivity_conditionally_proportional_secretion, Lj_MT4_relative_load>0), aes(x = Lj_MT4_relative_load, y = difference_measured_vs_modelled)) +
  geom_point() +  
  geom_line() +   
  scale_x_log10() + 
  labs(
    x = "Initial Load of Lj MT4 relative to Candida",
    y = "Difference Measured vs Modelled 
Mean Proportion Candida inhibited relative to control",
    title = "No sensitivity control, conditional & R1-dependent secretion"
  ) +
  theme_minimal() 


no_sensitivity_conditionally_proportional_secretion <- no_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(
    one_minus_Proportional_loss_Candida_modelled = 1 - Proportional_loss_Candida,
    one_minus_Proportional_loss_Candida_measured = 1 - Proportional_loss_Candida_measured
  )

# Create the scatter plot
ggplot(subset(no_sensitivity_conditionally_proportional_secretion, Lj_MT4_relative_load >0), aes(x = Lj_MT4_relative_load)) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  scale_x_log10() +  # Log10 scale for x-axis
  labs(
    x = "Lj MT4 Relative Load (log10 scale)",
    y = "Mean Proportional Inhibition of Candida",
    title = "No sensitivity control, 
Conditional & R1-dependent secretion",
    color = "Data type",
    fill = "± sd"
  ) +
  theme_minimal() +
  ylim(-0.1, NA)







#NEXT:
#conditional secretion, proportional sensitivity
##Now with sensitivity (i.e., c>0)
#Looped:
n_simulations <- 10000

#Candida control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
 
  
  # Define initial conditions
  init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control 

", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(NA, 7)

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control

", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  scale_y_log10()


Candida_control_data <- subset(plot_data, variable == "B2" & Time == 24)








#MT4 control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Conditional & R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(-0.25, 3) 

ggplot(plot_data, aes(x = Time, y = mean +0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Conditional & R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  #ylim(-0.25, 2) +
  scale_y_log10() 

  
  


MT4_control_data <- subset(plot_data, variable == "B1" & Time == 24)







#1:1 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()

Candida_1_1_data <- subset(plot_data, variable == "B2" & Time == 24)







#1:10 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
conditional& R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 

Candida_1_10_data <- subset(plot_data, variable == "B2" & Time == 24)






#1:100 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:100 Inoculation, 
Proportional sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_100_data <- subset(plot_data, variable == "B2" & Time == 24)










#1:1000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1000 Inoculation, 
Proportional sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_1000_data <- subset(plot_data, variable == "B2" & Time == 24)








#1:10000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10000 Inoculation, 
Proportional sensitivity, 
Conditional & R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() 


Candida_1_10000_data <- subset(plot_data, variable == "B2" & Time == 24)








##Output 
Candida_control_data$Ratio <- "Ctrl"
Candida_1_1_data$Ratio <- "1:1"
Candida_1_10_data$Ratio <- "1:10"
Candida_1_100_data$Ratio <- "1:100"
Candida_1_1000_data$Ratio <- "1:1000"
Candida_1_10000_data$Ratio <- "1:10000"

linearly_prop_sensitivity_conditionally_proportional_secretion <- rbind(Candida_control_data, Candida_1_1_data,
                                                          Candida_1_10_data, Candida_1_100_data,
                                                          Candida_1_1000_data, Candida_1_10000_data)

Candida_control_mean <- Candida_control_data[1,3]

linearly_prop_sensitivity_conditionally_proportional_secretion$Candida_control_mean <- Candida_control_mean$mean

linearly_prop_sensitivity_conditionally_proportional_secretion$Proportional_loss_Candida <- linearly_prop_sensitivity_conditionally_proportional_secretion$mean / linearly_prop_sensitivity_conditionally_proportional_secretion$Candida_control_mean




##Attach real/observed data for Proportional_loss_Candida
linearly_prop_sensitivity_conditionally_proportional_secretion <- linearly_prop_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 1,
    Ratio == "1:1" ~ 0.978,
    Ratio == "1:10" ~ 0.897,
    Ratio == "1:100" ~ 0.852,
    Ratio == "1:1000" ~ 0.822,
    Ratio == "1:10000" ~ 0.763
  ))


linearly_prop_sensitivity_conditionally_proportional_secretion <- linearly_prop_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(sd_Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 0.011,
    Ratio == "1:1" ~ 0.003,
    Ratio == "1:10" ~ 0.035,
    Ratio == "1:100" ~ 0.011,
    Ratio == "1:1000" ~ 0.026,
    Ratio == "1:10000" ~ 0.018
  ))


linearly_prop_sensitivity_conditionally_proportional_secretion$difference_measured_vs_modelled <- linearly_prop_sensitivity_conditionally_proportional_secretion$Proportional_loss_Candida - linearly_prop_sensitivity_conditionally_proportional_secretion$Proportional_loss_Candida_measured


linearly_prop_sensitivity_conditionally_proportional_secretion <- linearly_prop_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(Lj_MT4_relative_load = case_when(
    Ratio == "Ctrl" ~ 0,
    Ratio == "1:1" ~ 1,
    Ratio == "1:10" ~ 10,
    Ratio == "1:100" ~ 100,
    Ratio == "1:1000" ~ 1000,
    Ratio == "1:10000" ~ 10000
  ))




ggplot(subset(linearly_prop_sensitivity_conditionally_proportional_secretion, Lj_MT4_relative_load>0), aes(x = Lj_MT4_relative_load, y = difference_measured_vs_modelled)) +
  geom_point() +  
  geom_line() +   
  scale_x_log10() + 
  labs(
    x = "Initial Load of Lj MT4 relative to Candida",
    y = "Difference Measured vs Modelled 
Mean Proportion Candida inhibited relative to control",
    title = "Proportional sensitivity, conditional & R1-dependent secretion"
  ) +
  theme_minimal() 


linearly_prop_sensitivity_conditionally_proportional_secretion <- linearly_prop_sensitivity_conditionally_proportional_secretion %>%
  dplyr::mutate(
    one_minus_Proportional_loss_Candida_modelled = 1 - Proportional_loss_Candida,
    one_minus_Proportional_loss_Candida_measured = 1 - Proportional_loss_Candida_measured
  )

# Create the scatter plot
ggplot(subset(linearly_prop_sensitivity_conditionally_proportional_secretion, Lj_MT4_relative_load >0), aes(x = Lj_MT4_relative_load)) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  scale_x_log10() +  # Log10 scale for x-axis
  labs(
    x = "Lj MT4 Relative Load (log10 scale)",
    y = "Mean Proportional Inhibition of Candida",
    title = "Proportional sensitivity, 
Conditional & R1-dependent secretion",
    color = "Data type",
    fill = "± sd"
  ) +
  theme_minimal() +
  ylim(-0.1, NA)

















##NEXT: Unconditional, R1-dependent secretion of M2 
########So secretion independent from B1 going quorate

n_simulations <- 10000

#Candida control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control 

", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(NA, 7)

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control

", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  scale_y_log10()


Candida_control_data <- subset(plot_data, variable == "B2" & Time == 24)








#MT4 control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(-0.25, 3) 

ggplot(plot_data, aes(x = Time, y = mean +0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  #ylim(-0.25, 2) +
  scale_y_log10() 





MT4_control_data <- subset(plot_data, variable == "B1" & Time == 24)







#1:1 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()

Candida_1_1_data <- subset(plot_data, variable == "B2" & Time == 24)







#1:10 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 

Candida_1_10_data <- subset(plot_data, variable == "B2" & Time == 24)






#1:100 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:100 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_100_data <- subset(plot_data, variable == "B2" & Time == 24)










#1:1000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1000 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_1000_data <- subset(plot_data, variable == "B2" & Time == 24)








#1:10000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10000 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() 


Candida_1_10000_data <- subset(plot_data, variable == "B2" & Time == 24)








##Output 
Candida_control_data$Ratio <- "Ctrl"
Candida_1_1_data$Ratio <- "1:1"
Candida_1_10_data$Ratio <- "1:10"
Candida_1_100_data$Ratio <- "1:100"
Candida_1_1000_data$Ratio <- "1:1000"
Candida_1_10000_data$Ratio <- "1:10000"

linearly_prop_sensitivity_proportional_secretion <- rbind(Candida_control_data, Candida_1_1_data,
                                                                        Candida_1_10_data, Candida_1_100_data,
                                                                        Candida_1_1000_data, Candida_1_10000_data)

Candida_control_mean <- Candida_control_data[1,3]

linearly_prop_sensitivity_proportional_secretion$Candida_control_mean <- Candida_control_mean$mean

linearly_prop_sensitivity_proportional_secretion$Proportional_loss_Candida <- linearly_prop_sensitivity_proportional_secretion$mean / linearly_prop_sensitivity_proportional_secretion$Candida_control_mean




##Attach real/observed data for Proportional_loss_Candida
linearly_prop_sensitivity_proportional_secretion <- linearly_prop_sensitivity_proportional_secretion %>%
  dplyr::mutate(Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 1,
    Ratio == "1:1" ~ 0.978,
    Ratio == "1:10" ~ 0.897,
    Ratio == "1:100" ~ 0.852,
    Ratio == "1:1000" ~ 0.822,
    Ratio == "1:10000" ~ 0.763
  ))


linearly_prop_sensitivity_proportional_secretion <- linearly_prop_sensitivity_proportional_secretion %>%
  dplyr::mutate(sd_Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 0.011,
    Ratio == "1:1" ~ 0.003,
    Ratio == "1:10" ~ 0.035,
    Ratio == "1:100" ~ 0.011,
    Ratio == "1:1000" ~ 0.026,
    Ratio == "1:10000" ~ 0.018
  ))


linearly_prop_sensitivity_proportional_secretion$difference_measured_vs_modelled <- linearly_prop_sensitivity_proportional_secretion$Proportional_loss_Candida - linearly_prop_sensitivity_proportional_secretion$Proportional_loss_Candida_measured


linearly_prop_sensitivity_proportional_secretion <- linearly_prop_sensitivity_proportional_secretion %>%
  dplyr::mutate(Lj_MT4_relative_load = case_when(
    Ratio == "Ctrl" ~ 0,
    Ratio == "1:1" ~ 1,
    Ratio == "1:10" ~ 10,
    Ratio == "1:100" ~ 100,
    Ratio == "1:1000" ~ 1000,
    Ratio == "1:10000" ~ 10000
  ))




ggplot(subset(linearly_prop_sensitivity_proportional_secretion, Lj_MT4_relative_load>0), aes(x = Lj_MT4_relative_load, y = difference_measured_vs_modelled)) +
  geom_point() +  
  geom_line() +   
  scale_x_log10() + 
  labs(
    x = "Initial Load of Lj MT4 relative to Candida",
    y = "Difference Measured vs Modelled 
Mean Proportion Candida inhibited relative to control",
    title = "Proportional sensitivity, R1-dependent secretion"
  ) +
  theme_minimal() 


linearly_prop_sensitivity_proportional_secretion <- linearly_prop_sensitivity_proportional_secretion %>%
  dplyr::mutate(
    one_minus_Proportional_loss_Candida_modelled = 1 - Proportional_loss_Candida,
    one_minus_Proportional_loss_Candida_measured = 1 - Proportional_loss_Candida_measured
  )

# Create the scatter plot
ggplot(subset(linearly_prop_sensitivity_proportional_secretion, Lj_MT4_relative_load >0), aes(x = Lj_MT4_relative_load)) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  scale_x_log10() +  # Log10 scale for x-axis
  labs(
    x = "Lj MT4 Relative Load (log10 scale)",
    y = "Mean Proportional Inhibition of Candida",
    title = "Proportional sensitivity, 
R1-dependent secretion",
    color = "Data type",
    fill = "± sd"
  ) +
  theme_minimal() +
  ylim(-0.1, NA)











##NEXT: NO SENSITIVITY CONTROL, UNCONDITIONAL R1-DEPENDENT SECRETION
#No conditional secretion (i.e., secretor species not needing to go quorate for secretion of metabolite M2), no sensitivity control
n_simulations <- 10000

#Candida control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c = 0, #runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control 

", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(NA, 7)

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control

", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  scale_y_log10()


Candida_control_data <- subset(plot_data, variable == "B2" & Time == 24)








#MT4 control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c = 0, #runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(-0.25, 3) 

ggplot(plot_data, aes(x = Time, y = mean +0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

R1-dependent secretion of M2", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  #ylim(-0.25, 2) +
  scale_y_log10() 





MT4_control_data <- subset(plot_data, variable == "B1" & Time == 24)







#1:1 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c = 0, # runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
No sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
No sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()

Candida_1_1_data <- subset(plot_data, variable == "B2" & Time == 24)







#1:10 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c = 0, # runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
No sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
No sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 

Candida_1_10_data <- subset(plot_data, variable == "B2" & Time == 24)






#1:100 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c = 0, # runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:100 Inoculation, 
No sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_100_data <- subset(plot_data, variable == "B2" & Time == 24)










#1:1000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, #runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1000 Inoculation, 
No sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_1000_data <- subset(plot_data, variable == "B2" & Time == 24)








#1:10000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= 0, #runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * (Vmax1 * R1 * B1) / (K1 + R1) 
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10000 Inoculation, 
Proportional sensitivity, 
R1-dependent secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() 


Candida_1_10000_data <- subset(plot_data, variable == "B2" & Time == 24)








##Output 
Candida_control_data$Ratio <- "Ctrl"
Candida_1_1_data$Ratio <- "1:1"
Candida_1_10_data$Ratio <- "1:10"
Candida_1_100_data$Ratio <- "1:100"
Candida_1_1000_data$Ratio <- "1:1000"
Candida_1_10000_data$Ratio <- "1:10000"

no_sensitivity_proportional_secretion <- rbind(Candida_control_data, Candida_1_1_data,
                                                                        Candida_1_10_data, Candida_1_100_data,
                                                                        Candida_1_1000_data, Candida_1_10000_data)

Candida_control_mean <- Candida_control_data[1,3]

no_sensitivity_proportional_secretion$Candida_control_mean <- Candida_control_mean$mean

no_sensitivity_proportional_secretion$Proportional_loss_Candida <- no_sensitivity_proportional_secretion$mean / no_sensitivity_proportional_secretion$Candida_control_mean




##Attach real/observed data for Proportional_loss_Candida
no_sensitivity_proportional_secretion <- no_sensitivity_proportional_secretion %>%
  dplyr::mutate(Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 1,
    Ratio == "1:1" ~ 0.978,
    Ratio == "1:10" ~ 0.897,
    Ratio == "1:100" ~ 0.852,
    Ratio == "1:1000" ~ 0.822,
    Ratio == "1:10000" ~ 0.763
  ))


no_sensitivity_proportional_secretion <- no_sensitivity_proportional_secretion %>%
  dplyr::mutate(sd_Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 0.011,
    Ratio == "1:1" ~ 0.003,
    Ratio == "1:10" ~ 0.035,
    Ratio == "1:100" ~ 0.011,
    Ratio == "1:1000" ~ 0.026,
    Ratio == "1:10000" ~ 0.018
  ))


no_sensitivity_proportional_secretion$difference_measured_vs_modelled <- no_sensitivity_proportional_secretion$Proportional_loss_Candida - no_sensitivity_proportional_secretion$Proportional_loss_Candida_measured


no_sensitivity_proportional_secretion <- no_sensitivity_proportional_secretion %>%
  dplyr::mutate(Lj_MT4_relative_load = case_when(
    Ratio == "Ctrl" ~ 0,
    Ratio == "1:1" ~ 1,
    Ratio == "1:10" ~ 10,
    Ratio == "1:100" ~ 100,
    Ratio == "1:1000" ~ 1000,
    Ratio == "1:10000" ~ 10000
  ))




ggplot(subset(no_sensitivity_proportional_secretion, Lj_MT4_relative_load>0), aes(x = Lj_MT4_relative_load, y = difference_measured_vs_modelled)) +
  geom_point() +  
  geom_line() +   
  scale_x_log10() + 
  labs(
    x = "Initial Load of Lj MT4 relative to Candida",
    y = "Difference Measured vs Modelled 
Mean Proportion Candida inhibited relative to control",
    title = "No sensitivity, R1-dependent secretion"
  ) +
  theme_minimal() 


no_sensitivity_proportional_secretion <- no_sensitivity_proportional_secretion %>%
  dplyr::mutate(
    one_minus_Proportional_loss_Candida_modelled = 1 - Proportional_loss_Candida,
    one_minus_Proportional_loss_Candida_measured = 1 - Proportional_loss_Candida_measured
  )

# Create the scatter plot
ggplot(subset(no_sensitivity_proportional_secretion, Lj_MT4_relative_load >0), aes(x = Lj_MT4_relative_load)) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  scale_x_log10() +  # Log10 scale for x-axis
  labs(
    x = "Lj MT4 Relative Load (log10 scale)",
    y = "Mean Proportional Inhibition of Candida",
    title = "No sensitivity, 
R1-dependent secretion",
    color = "Data type",
    fill = "± sd"
  ) +
  theme_minimal() +
  ylim(-0.1, 0.4)












#NEXT: LINEAR SECRETION CONTROLS. I.e., R1-independent secretion; secretion only proportional to population density of secretor species
###Linear secretion controls
########Secretion from the start (i.e., secretor not needing to go quorate prior to secretion of metabolite M2)
#No conditional secretion
n_simulations <- 10000

#Candida control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control 

", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(NA, 7)

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control

", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  scale_y_log10()


Candida_control_data <- subset(plot_data, variable == "B2" & Time == 24)








#MT4 control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Linear secretion of M2", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(-0.25, 3) 

ggplot(plot_data, aes(x = Time, y = mean +0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Linear secretion of M2", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  #ylim(-0.25, 2) +
  scale_y_log10() 





MT4_control_data <- subset(plot_data, variable == "B1" & Time == 24)







#1:1 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
Linear secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
Linear secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()

Candida_1_1_data <- subset(plot_data, variable == "B2" & Time == 24)







#1:10 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
Linear secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
Linear secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 

Candida_1_10_data <- subset(plot_data, variable == "B2" & Time == 24)






#1:100 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:100 Inoculation, 
Proportional sensitivity, 
Linear secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_100_data <- subset(plot_data, variable == "B2" & Time == 24)










#1:1000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1000 Inoculation, 
Proportional sensitivity, 
Linear secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_1000_data <- subset(plot_data, variable == "B2" & Time == 24)








#1:10000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    #quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      # if (B1 < quorate_threshold) {
      #   gamma2 <- 0
      # }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10000 Inoculation, 
Proportional sensitivity, 
Linear secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() 


Candida_1_10000_data <- subset(plot_data, variable == "B2" & Time == 24)








##Output 
Candida_control_data$Ratio <- "Ctrl"
Candida_1_1_data$Ratio <- "1:1"
Candida_1_10_data$Ratio <- "1:10"
Candida_1_100_data$Ratio <- "1:100"
Candida_1_1000_data$Ratio <- "1:1000"
Candida_1_10000_data$Ratio <- "1:10000"

linearly_prop_sensitivity_linear_secretion <- rbind(Candida_control_data, Candida_1_1_data,
                                                                        Candida_1_10_data, Candida_1_100_data,
                                                                        Candida_1_1000_data, Candida_1_10000_data)

Candida_control_mean <- Candida_control_data[1,3]

linearly_prop_sensitivity_linear_secretion$Candida_control_mean <- Candida_control_mean$mean

linearly_prop_sensitivity_linear_secretion$Proportional_loss_Candida <- linearly_prop_sensitivity_linear_secretion$mean / linearly_prop_sensitivity_linear_secretion$Candida_control_mean




##Attach real/observed data for Proportional_loss_Candida
linearly_prop_sensitivity_linear_secretion <- linearly_prop_sensitivity_linear_secretion %>%
  dplyr::mutate(Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 1,
    Ratio == "1:1" ~ 0.978,
    Ratio == "1:10" ~ 0.897,
    Ratio == "1:100" ~ 0.852,
    Ratio == "1:1000" ~ 0.822,
    Ratio == "1:10000" ~ 0.763
  ))


linearly_prop_sensitivity_linear_secretion <- linearly_prop_sensitivity_linear_secretion %>%
  dplyr::mutate(sd_Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 0.011,
    Ratio == "1:1" ~ 0.003,
    Ratio == "1:10" ~ 0.035,
    Ratio == "1:100" ~ 0.011,
    Ratio == "1:1000" ~ 0.026,
    Ratio == "1:10000" ~ 0.018
  ))


linearly_prop_sensitivity_linear_secretion$difference_measured_vs_modelled <- linearly_prop_sensitivity_linear_secretion$Proportional_loss_Candida - linearly_prop_sensitivity_linear_secretion$Proportional_loss_Candida_measured


linearly_prop_sensitivity_linear_secretion <- linearly_prop_sensitivity_linear_secretion %>%
  dplyr::mutate(Lj_MT4_relative_load = case_when(
    Ratio == "Ctrl" ~ 0,
    Ratio == "1:1" ~ 1,
    Ratio == "1:10" ~ 10,
    Ratio == "1:100" ~ 100,
    Ratio == "1:1000" ~ 1000,
    Ratio == "1:10000" ~ 10000
  ))




ggplot(subset(linearly_prop_sensitivity_linear_secretion, Lj_MT4_relative_load>0), aes(x = Lj_MT4_relative_load, y = difference_measured_vs_modelled)) +
  geom_point() +  
  geom_line() +   
  scale_x_log10() + 
  labs(
    x = "Initial Load of Lj MT4 relative to Candida",
    y = "Difference Measured vs Modelled 
Mean Proportion Candida inhibited relative to control",
    title = "Proportional sensitivity, Linear secretion"
  ) +
  theme_minimal() 


linearly_prop_sensitivity_linear_secretion <- linearly_prop_sensitivity_linear_secretion %>%
  dplyr::mutate(
    one_minus_Proportional_loss_Candida_modelled = 1 - Proportional_loss_Candida,
    one_minus_Proportional_loss_Candida_measured = 1 - Proportional_loss_Candida_measured
  )

# Create the scatter plot
ggplot(subset(linearly_prop_sensitivity_linear_secretion, Lj_MT4_relative_load >0), aes(x = Lj_MT4_relative_load)) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  scale_x_log10() +  # Log10 scale for x-axis
  labs(
    x = "Lj MT4 Relative Load (log10 scale)",
    y = "Mean Proportional Inhibition of Candida",
    title = "Proportional sensitivity, 
Linear secretion",
    color = "Data type",
    fill = "± sd"
  ) +
  theme_minimal() +
  ylim(-0.1, NA)















#NEXT: LINEAR SECRETION CONTROLS: CONDITIONAL SECRETION 
###Linear secretion controls
########Secretion only when secretor goes quorate
#conditional secretion
n_simulations <- 10000

#Candida control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control 

", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(NA, 7)

ggplot(plot_data, aes(x = Time, y = mean + 0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "Candida control

", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  scale_y_log10()


Candida_control_data <- subset(plot_data, variable == "B2" & Time == 24)








#MT4 control
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }

      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Linear & conditional secretion of M2", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  ylim(-0.25, 3) 

ggplot(plot_data, aes(x = Time, y = mean +0.0001, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "L. johnsonii MT4 control, 

Linear & conditional secretion of M2", x = "Time", y = "Concentration (in OD) + 1e-04", color = "State Variable", fill = "State Variable") +
  theme_minimal() +
  #ylim(-0.25, 2) +
  scale_y_log10() 





MT4_control_data <- subset(plot_data, variable == "B1" & Time == 24)







#1:1 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
Linear & conditional secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1 Inoculation, 
Proportional sensitivity, 
Linear & conditional secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()

Candida_1_1_data <- subset(plot_data, variable == "B2" & Time == 24)







#1:10 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }
      # 
      #Carbon catabolic repression 
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
Linear & conditional secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  #geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10 Inoculation, 
Proportional sensitivity, 
Linear & conditional secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()+
  scale_y_log10() 

Candida_1_10_data <- subset(plot_data, variable == "B2" & Time == 24)






#1:100 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      # #Going quorate
       if (B1 < quorate_threshold) {
         gamma2 <- 0
       }

      #Carbon catabolic repression
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")

# long format for ggplot
plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:100 Inoculation, 
Proportional sensitivity, 
Linear & conditional secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_100_data <- subset(plot_data, variable == "B2" & Time == 24)










#1:1000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  #init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {

      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }

      #Carbon catabolic repression
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}


combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:1000 Inoculation, 
Proportional sensitivity, 
Linear & conditional secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal()


Candida_1_1000_data <- subset(plot_data, variable == "B2" & Time == 24)








#1:10000 Inoculation ratio
simulation_results <- list()

# Run the loop for n simulations
for (i in 1:n_simulations) {
  
  #parameters for the current simulation; drawn with ~10% standard div to introduce inter-sim variability
  gamma1 = runif(1, 0.6, 0.9) #60% to 90% of carbon from glucose ends as lactic acid when fermented (homolactically highest, heterolactically lowest range) by lactobacillus; minimal carbon leakage/loss
  rest = 1 - gamma1 #rest of carbon uptaken is reallocated intracellularly
  gamma2 = runif(1, 0.02, 0.1) * rest #2% to 10% is redirected to synthesis of M2
  y1 = rest - gamma2 #what's left remains as bacterial biomass for L. johnsonii
  K2 = rnorm(1, 0.5, 0.05)
  
  params <- c(
    phi = 0.002, #constant death rate
    y1 = y1,  
    y2 = runif(1, 0.4, 0.6),    #candida is more efficient via oxidative phosphorylation, ~40-60% carbon use efficiency in using sugars, rest is lost as CO2
    y3 = runif(1, 0.35, 0.55),    #candida is less efficient in growing on peptides in the BHI medium, since this requires synthesis of extracellular enzymes before they can be absorbed and metabolised
    yL = runif(1, 0.4, 0.6),    
    Vmax1 = rnorm(1, 0.33, 0.033), #Lactobacillus may be less efficient in growing on the sugars (R1), it does grow faster
    Vmax2 = rnorm(1, 0.3, 0.03), #Candida may be more efficient in converting the carbons in the sugars (R1), it does grow slower
    Vmax3 = rnorm(1, 0.3, 0.03),
    VmaxL = rnorm(1, 0.03, 0.003), #Candida is slower still when growing on lactic acid, since this requires additional pathways
    K1 = rnorm(1, 0.3, 0.03), 
    K2 = K2,
    K3 = rnorm(1, 0.6, 0.06), #larger, complex molecules like peptides become harder to scavange at lower concentrations
    KL = rnorm(1, 1, 0.1), 
    gamma1 = gamma1, 
    gamma2 = gamma2,
    c= runif(1, 0.5, 2), #linearly proportional sensitvity
    quorate_threshold <- rnorm(1, 0.6, 0.1), #quorate threshold should be around midexponential/logistic phase of MT4
    catabolic_repression_threshold <- runif(1, K2, 2) #When the concentration of the primary carbon source (e.g., glucose) drops to the same level as the half-saturation constant or less than half of the initial R1 concentration, the bug is no longer able to grow at its optimal rate on the primary carbon source
  )
  
  
  
  # Define initial conditions
  #init <- c(R1= 4, R2 = 8,   B1 = 0, M1 = 0, M2=0, B2 = 0.005) #1:0 ratio: control
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.25, M1 = 0, M2=0, B2 = 0) #0:1 ratio: control (at initial OD tested in monoculture of Suppl. figure 1)
  #init <- c(R1 = 4, R2 = 8,  B1 = 0.00025, M1 = 0, M2 = 0, B2 = 0.005) #1:1 ratio, 5 * 10^4 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.0025, M1 = 0, M2=0, B2 = 0.005) #1:10 ratio, 5 * 10^5 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.025, M1 = 0, M2=0, B2 = 0.005) #1:100 ratio, 5 * 10^6 cells
  #init <- c(R1 = 4, R2 = 8, B1 = 0.25, M1 = 0, M2=0, B2 = 0.005) #1:1000 ratio, 5 * 10^7 cells
  init <- c(R1= 4, R2 = 8, B1 = 2.5, M1 = 0, M2=0, B2 = 0.005) #1:10000 , 5 * 10^8 cells
  
  # Define ODE model
  model <- function(time, state, parameters) {
    with(as.list(c(state, parameters)), {
      
      #Going quorate
      if (B1 < quorate_threshold) {
        gamma2 <- 0
      }

      #Carbon catabolic repression
      
      if (R1 > catabolic_repression_threshold) {
        Vmax3 <- 0
        VmaxL <- 0
      }
      
      dR1 <- - 1/y1 * B1 * (Vmax1 * R1) / (K1 + R1) - 1/y2 * B2 * (Vmax2 * R1) / (K2 + R1)
      dR2 <- -1/y3 * B2 * (Vmax3 * R2) / (K3 + R2)
      dB1 <- B1 * (Vmax1 * R1) / (K1 + R1) - phi*B1
      dM1 <- gamma1 * (Vmax1 * R1 * B1) / (K1 + R1) - 1/yL * B2 * (VmaxL * M1) / (KL + M1)
      dM2 <- gamma2 * B1
      dB2 <- B2 * ((Vmax2 * R1) / (K2+R1) + (Vmax3 * R2) / (K3+R2) + (VmaxL * M1) / (KL + M1)) - c*B2*M2 - phi*B2
      
      return(list(c(dR1, dR2, dB1, dM1, dM2, dB2)))
    })
  }
  
  #Time to integrate
  times <- seq(0, 24, by = 0.1)
  
  #run ODE solver
  out <- ode(y = init, times = times, func = model, parms = params)
  
  #store results after every loop
  simulation_results[[i]] <- as.data.frame(out)
}



combined_results <- bind_rows(simulation_results)

summary_results <- combined_results %>%
  dplyr::group_by(time) %>%
  dplyr::summarise(across(starts_with("R"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("B"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"),
                   across(starts_with("M"), list(mean = ~mean(.), sd = ~sd(.)), .names = "{.col}_{.fn}"))

head(summary_results)

colnames(summary_results) <- c("Time", "R1_mean", "R1_sd", "R2_mean", "R2_sd", "B1_mean", "B1_sd", "B2_mean", "B2_sd", "M1_mean", "M1_sd", "M2_mean", "M2_sd")


plot_data <- summary_results %>%
  tidyr::pivot_longer(cols = starts_with("R") | starts_with("B") | starts_with("M"),
                      names_to = c("variable", ".value"),
                      names_pattern = "(.*)_(.*)") 

ggplot(plot_data, aes(x = Time, y = mean, color = variable)) +
  geom_line() +  # Mean lines
  geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd, fill = variable), alpha = 0.2, color = NA) +  #  ± sd
  labs(title = "1:10000 Inoculation, 
Proportional sensitivity, 
Linear & conditional secretion", x = "Time", y = "Concentration (in OD)", color = "State Variable", fill = "State Variable") +
  theme_minimal() 


Candida_1_10000_data <- subset(plot_data, variable == "B2" & Time == 24)








##Output 
Candida_control_data$Ratio <- "Ctrl"
Candida_1_1_data$Ratio <- "1:1"
Candida_1_10_data$Ratio <- "1:10"
Candida_1_100_data$Ratio <- "1:100"
Candida_1_1000_data$Ratio <- "1:1000"
Candida_1_10000_data$Ratio <- "1:10000"

linearly_prop_sensitivity_conditionally_linear_secretion <- rbind(Candida_control_data, Candida_1_1_data,
                                                                        Candida_1_10_data, Candida_1_100_data,
                                                                        Candida_1_1000_data, Candida_1_10000_data)

Candida_control_mean <- Candida_control_data[1,3]

linearly_prop_sensitivity_conditionally_linear_secretion$Candida_control_mean <- Candida_control_mean$mean

linearly_prop_sensitivity_conditionally_linear_secretion$Proportional_loss_Candida <- linearly_prop_sensitivity_conditionally_linear_secretion$mean / linearly_prop_sensitivity_conditionally_linear_secretion$Candida_control_mean




##Attach real/observed data for Proportional_loss_Candida
linearly_prop_sensitivity_conditionally_linear_secretion <- linearly_prop_sensitivity_conditionally_linear_secretion %>%
  dplyr::mutate(Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 1,
    Ratio == "1:1" ~ 0.978,
    Ratio == "1:10" ~ 0.897,
    Ratio == "1:100" ~ 0.852,
    Ratio == "1:1000" ~ 0.822,
    Ratio == "1:10000" ~ 0.763
  ))


linearly_prop_sensitivity_conditionally_linear_secretion <- linearly_prop_sensitivity_conditionally_linear_secretion %>%
  dplyr::mutate(sd_Proportional_loss_Candida_measured = case_when(
    Ratio == "Ctrl" ~ 0.011,
    Ratio == "1:1" ~ 0.003,
    Ratio == "1:10" ~ 0.035,
    Ratio == "1:100" ~ 0.011,
    Ratio == "1:1000" ~ 0.026,
    Ratio == "1:10000" ~ 0.018
  ))


linearly_prop_sensitivity_conditionally_linear_secretion$difference_measured_vs_modelled <- linearly_prop_sensitivity_conditionally_linear_secretion$Proportional_loss_Candida - linearly_prop_sensitivity_conditionally_linear_secretion$Proportional_loss_Candida_measured


linearly_prop_sensitivity_conditionally_linear_secretion <- linearly_prop_sensitivity_conditionally_linear_secretion %>%
  dplyr::mutate(Lj_MT4_relative_load = case_when(
    Ratio == "Ctrl" ~ 0,
    Ratio == "1:1" ~ 1,
    Ratio == "1:10" ~ 10,
    Ratio == "1:100" ~ 100,
    Ratio == "1:1000" ~ 1000,
    Ratio == "1:10000" ~ 10000
  ))




ggplot(subset(linearly_prop_sensitivity_conditionally_linear_secretion, Lj_MT4_relative_load>0), aes(x = Lj_MT4_relative_load, y = difference_measured_vs_modelled)) +
  geom_point() +  
  geom_line() +   
  scale_x_log10() + 
  labs(
    x = "Initial Load of Lj MT4 relative to Candida",
    y = "Difference Measured vs Modelled 
Mean Proportion Candida inhibited relative to control",
    title = "Proportional sensitivity, Linear & conditional secretion"
  ) +
  theme_minimal() 


linearly_prop_sensitivity_conditionally_linear_secretion <- linearly_prop_sensitivity_conditionally_linear_secretion %>%
  dplyr::mutate(
    one_minus_Proportional_loss_Candida_modelled = 1 - Proportional_loss_Candida,
    one_minus_Proportional_loss_Candida_measured = 1 - Proportional_loss_Candida_measured
  )

# Create the scatter plot
ggplot(subset(linearly_prop_sensitivity_conditionally_linear_secretion, Lj_MT4_relative_load >0), aes(x = Lj_MT4_relative_load)) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_modelled, color = "Modelled")) +
  geom_point(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  geom_line(aes(y = one_minus_Proportional_loss_Candida_measured, color = "Measured")) +
  scale_x_log10() +  # Log10 scale for x-axis
  labs(
    x = "Lj MT4 Relative Load (log10 scale)",
    y = "Mean Proportional Inhibition of Candida",
    title = "Proportional sensitivity, 
Linear & conditional secretion",
    color = "Data type",
    fill = "± sd"
  ) +
  theme_minimal() +
  ylim(-0.1, NA)

